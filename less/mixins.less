// Utilities
// -------------------------

// Clearfix
// Source: http://nicolasgallagher.com/micro-clearfix-hack/
.clearfix() {
	&:before,
	&:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// Webkit-style focus
.tab-focus() {
	// Default
	outline: thin dotted #333;
	// Webkit
	outline: 5px auto -webkit-focus-ring-color;
	outline-offset: -2px;
}

// Center-align a block level element
.center-block() {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Sizing shortcuts
.size(@width; @height) {
	width: @width;
	height: @height;
}
.square(@size) {
	.size(@size; @size);
}

// Placeholder text
.placeholder(@color: @input-color-placeholder) {
	&:-moz-placeholder						{ color: @color; } // Firefox 4-18
	&::-moz-placeholder					 { color: @color; } // Firefox 19+
	&:-ms-input-placeholder			 { color: @color; } // Internet Explorer 10+
	&::-webkit-input-placeholder	{ color: @color; } // Safari and Chrome
}

// Text overflow
// Requires inline-block or block for proper styling
.text-overflow() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

// Hide text completely
.text-hide() {
	font: ~"0/0" a;
	color: transparent;
	text-shadow: none;
	background-color: transparent;
	border: 0;
}

// or, if we have problems with that
.ir() {
	text-indent: 100%;
	overflow: hidden;
	white-space: nowrap;
}

// Hide from everything but screen readers
.text-sr-only() {
	clip: rect(1px, 1px, 1px, 1px);
	position: absolute;
	&:hover,
	&:active,
	&:focus {
		clip: auto;
		position: inherit;
	}
}



// Font size. line-height and margin calculations, to be used in base.less
.font-size-emcalc(@size: @base-font-size) {
	font-size: unit((@size / @base-font-size), em);
}
.font-family(@font-family; @default-font-family) when not (@font-family = @default-font-family) {
  font-family: @font-family;
}
.margin-emcalc(@margin-top: 0, @margin-right: 0, @margin-bottom: @base-margin, @margin-left: 0, @size: @base-font-size) {
	@margin-top-emcalc: unit((@margin-top / @size), em);
	@margin-right-calc: unit((@margin-right / @size), em);
	@margin-bottom-emcalc: unit((@margin-bottom / @size), em);
	@margin-left-calc: unit((@margin-left / @size), em);
	margin: @margin-top-emcalc @margin-right-calc @margin-bottom-emcalc @margin-left-calc;
}
.margin-bottom-emcalc(@margin-bottom: @base-margin, @size: @base-font-size) when (@margin-bottom > 0) {
	margin-bottom: unit((@margin-bottom / @size), em);
}
.margin-top-emcalc(@margin-top: @base-margin, @size: @base-font-size) when (@margin-top > 0) {
	margin-top: unit((@margin-top / @size), em);
}
.margin-right-emcalc(@margin-right: @base-margin, @size: @base-font-size) when (@margin-right > 0) {
	margin-right: unit((@margin-right / @size), em);
}
.margin-left-emcalc(@margin-left: @base-margin, @size: @base-font-size) when (@margin-left > 0) {
	margin-left: unit((@margin-left / @size), em);
}
.line-height-calc(@line-height: @base-line-height, @size: @base-font-size) {
	line-height: (@line-height / @size);
}
.height-emcalc(@line-height: @base-line-height, @size: @base-font-size) {
	height: unit((@line-height / @size), em);
}
.padding-emcalc(@padding-vertical: @form-padding-vertical, @padding-horizontal: @form-padding-horizontal, @size: @base-font-size) {
	padding: unit((@padding-vertical / @size), em) unit((@padding-horizontal / @size), em);
}
.padding-bottom-emcalc(@padding-bottom: @base-margin, @size: @base-font-size) when (@padding-bottom > 0) {
	padding-bottom: unit((@padding-bottom / @size), em);
}
.padding-top-emcalc(@padding-top: @base-margin, @size: @base-font-size) when (@padding-top > 0) {
	padding-top: unit((@padding-top / @size), em);
}
.padding-right-emcalc(@padding-right: @base-margin, @size: @base-font-size) when (@padding-right > 0) {
	padding-right: unit((@padding-right / @size), em);
}
.padding-left-emcalc(@padding-left: @base-margin, @size: @base-font-size) when (@padding-left > 0) {
	padding-left: unit((@padding-left / @size), em);
}
.border(@border-top-width: 1px,  @border-right-width: 1px, @border-bottom-width: 1px, @border-left-width: 1px, @border-color: @base-border-color, @border-style: solid) {
	border-width: @border-top-width @border-right-width, @border-bottom-width, @border-left-width;
	border-style: @border-style;
	border-color: @border-color;
}
.border-top(@border-top-width, @border-top-style: solid, @border-color: @base-border-color) when (@border-top-width > 0) {
	border-top: @border-top-width @border-top-style @border-color;
}
.border-right(@border-right-width, @border-right-style: solid, @border-color: @base-border-color) when (@border-right-width > 0) {
	border-right: @border-right-width @border-right-style @border-color;
}
.border-bottom(@border-bottom-width, @border-bottom-style: solid, @border-color: @base-border-color) when (@border-bottom-width > 0) {
	border-bottom: @border-bottom-width @border-bottom-style @border-color;
}
.border-left(@border-left-width, @border-left-style: solid, @border-color: @base-border-color) when (@border-left-width > 0) {
	border-left: @border-left-width @border-left-style @border-color;
}

// Headings
// -------------------------
.heading() {
	font-family: @headings-font-family;
	line-height: @headings-line-height;
	font-weight: @headings-font-weight;
	color: @headings-color;
	a {
		color: @headings-link-color;
		&:hover,
		&:focus {
			color: @headings-link-hover-color;
			text-decoration: none;
		}
	}
}
.h1() {
	.font-size-emcalc(@h1-font-size);
	.margin-bottom-emcalc(@h1-margin-bottom, @h1-font-size);
	.margin-top-emcalc(@h1-margin-top, @h1-font-size);
}
.h2() {
	.font-size-emcalc(@h2-font-size);
	.margin-bottom-emcalc(@h2-margin-bottom, @h2-font-size);
	.margin-top-emcalc(@h2-margin-top, @h2-font-size);
	line-height: @h2-line-height;
}
.h3() {
	.font-size-emcalc(@h3-font-size);
	.margin-bottom-emcalc(@h3-margin-bottom, @h3-font-size);
	.margin-top-emcalc(@h3-margin-top, @h3-font-size);
	line-height: @h3-line-height;
}
.h4() {
	.font-size-emcalc(@h4-font-size);
	.margin-bottom-emcalc(@h4-margin-bottom, @h4-font-size);
	.margin-top-emcalc(@h4-margin-top, @h4-font-size);
	line-height: @h4-line-height;
}
.h5() {
	.font-size-emcalc(@h5-font-size);
	.margin-bottom-emcalc(@h5-margin-bottom, @h5-font-size);
	.margin-top-emcalc(@h5-margin-top, @h5-font-size);
	line-height: @h5-line-height;
}
.h6() {
	.font-size-emcalc(@h6-font-size);
	.margin-bottom-emcalc(@h6-margin-bottom, @h5-font-size);
	.margin-top-emcalc(@h6-margin-top, @h6-font-size);
	line-height: @h6-line-height;
}

// CSS3 PROPERTIES
// --------------------------------------------------

// Single side border-radius
.border-top-radius(@radius) {
	border-top-right-radius: @radius;
	border-top-left-radius: @radius;
}
.border-right-radius(@radius) {
	border-bottom-right-radius: @radius;
	border-top-right-radius: @radius;
}
.border-bottom-radius(@radius) {
	border-bottom-right-radius: @radius;
	 border-bottom-left-radius: @radius;
}
.border-left-radius(@radius) {
	border-bottom-left-radius: @radius;
	border-top-left-radius: @radius;
}

// CSS3 Content Columns
.content-columns(@column-count; @column-gap: @grid-gutter-width) {
	column-count: @column-count;
	column-gap: @column-gap;
}

// Optional hyphenation
.hyphens(@mode: auto) {
	word-wrap: break-word;
	hyphens: @mode;
}







// Retina images
.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
	background-image: url("@{file-1x}");

	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (min--moz-device-pixel-ratio: 2),
	only screen and (-o-min-device-pixel-ratio: 2/1),
	only screen and (min-device-pixel-ratio: 2),
	only screen and (min-resolution: 192dpi),
	only screen and (min-resolution: 2dppx) {
		background-image: url("@{file-2x}");
		background-size: @width-1x @height-1x;
	}
}

// Image mixins
.img-circle() {
	border-radius: 50%; // set radius in percents
}
.img-rounded() {
	border-radius: @border-radius-large;
}

// Button variants
// -------------------------
// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.button-variant(@color; @background; @border) {
	color: @color;
	background-color: @background;
	border-color: @border;

	&:hover,
	&:focus,
	&:active,
	&.active,
	.open .dropdown-toggle& {
		color: @color;
		background-color: darken(@background, 8%);
		border-color: darken(@border, 12%);
	}
	&:active,
	&.active,
	.open .dropdown-toggle& {
		background-image: none;
	}
	&.disabled,
	&[disabled],
	fieldset[disabled] & {
		&,
		&:hover,
		&:focus,
		&:active,
		&.active {
			background-color: @background;
			border-color: @border
		}
	}
}

// Button sizes
// -------------------------
.button-size(@padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
	padding: @padding-vertical @padding-horizontal;
	font-size: @font-size;
	line-height: @line-height;
	border-radius: @border-radius;
}

// Responsive utilities
// -------------------------
// More easily include all the states for responsive-utilities.less.
.responsive-visibility() {
	display: block !important;
	tr& { display: table-row !important; }
	th&,
	td& { display: table-cell !important; }
}

.responsive-invisibility() {
	display: none !important;
	tr& { display: none !important; }
	th&,
	td& { display: none !important; }
}

// Form validation states
//
// Used in forms.less to generate the form validation CSS for warnings, errors,
// and successes.

.form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {
	// Color the label and help text
	.help-block,
	.control-label {
		color: @text-color;
	}
	// Set the border and box shadow on specific inputs to match
	.form-control {
		border-color: @border-color;
		.box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
		&:focus {
			border-color: darken(@border-color, 10%);
			@shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);
			.box-shadow(@shadow);
		}
	}
	// Set validation states also for addons
	.input-group-addon {
		color: @text-color;
		border-color: @border-color;
		background-color: @background-color;
	}
}

// Form control focus state
//
// Generate a customized focus state and for any input with the specified color,
// which defaults to the `@input-focus-border` variable.
//
// We highly encourage you to not customize the default value, but instead use
// this to tweak colors on an as-needed basis. This aesthetic change is based on
// WebKit's default styles, but applicable to a wider range of browsers. Its
// usability and accessibility should be taken into account with any change.
//
// Example usage: change the default blue border and shadow to white for better
// contrast against a dark gray background.

.form-control-focus(@color: @input-border-focus) {
	@color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
	&:focus {
		border-color: @color;
		outline: 0;
		box-shadow: ~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}";
	}
}

// Form control sizing
//
// Relative text size, padding, and border-radii changes for form controls. For
// horizontal sizing, wrap controls in the predefined grid classes. `<select>`
// element gets special love because it's special, and that's a fact!

.input-size(@input-height; @padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
	height: @input-height;
	padding: @padding-vertical @padding-horizontal;
	font-size: @font-size;
	line-height: @line-height;
	border-radius: @border-radius;

	select& {
		height: @input-height;
		line-height: @input-height;
	}

	textarea& {
		height: auto;
	}
}

// GRID SYSTEM
// Hybrid of Bootstrap and semantic.gs
// --------------------------------------------------
// Centered container element
.make-container(@gutter: @gutter-width-calc, @width: @gridsystem-width-calc) {
	padding-left: @gutter / 2;
	padding-right: @gutter / 2;
	max-width: (@width + @gutter);
	.clearfix;
}
.make-row(@gutter: @gutter-width-calc) {
	margin-left: @gutter / -2;
	margin-right: @gutter / -2;
	.clearfix;
}
.make-column(@gutter: @gutter-width-calc) {
	position: relative;
	float: left;
	min-height: 1px;
	padding-left: @gutter / 2;
	padding-right: @gutter / 2;
}
.generate-columns(@n, @i: 1) when (@i <= @n) {
	.cols-@{i} {
		width: (@i * 100% / @n);
	}
	.generate-columns(@n, (@i + 1));
}
.generate-pushes(@n, @i: 1) when (@i <= @n) {
	.push-@{i} {
		margin-left: (@i * 100% / @n);
	}
	.generate-pushes(@n, (@i + 1));
}
.generate-pulls(@n, @i: 1) when (@i <= @n) {
	.pull-@{i} {
		margin-right: (@i * 100% / @n);
	}
	.generate-pulls(@n, (@i + 1));
}
.generate-block-grids(@n, @i: 1) when (@i <= @n) {
	.block-grid-@{i} {
		& > .column {
			width: percentage(1 / @i);
			&:nth-of-type(n) {
				clear: none;
			}
			&:nth-of-type(@{i}n+1) {
				clear: both;
			}
		}
	}
	.generate-block-grids(@n, (@i + 1));
}
.generate-gallery-columns(@n, @i: 1) when (@i <= @n) {
	.gallery-columns-@{i} {
		& > .gallery-item {
			width: percentage(1 / @i);
			&:nth-of-type(n) {
				clear: none;
			}
			&:nth-of-type(@{i}n+1) {
				clear: both;
			}
		}
	}
	.generate-gallery-columns(@n, (@i + 1));
}
.columns(@x, @columns: @columns) {
	width: percentage(@x / @columns);
}
.push(@offset: 1, @columns: @columns) {
	margin-left: percentage(@offset / @columns);
}
.pull(@offset: 1, @columns: @columns) {
	margin-right: percentage(@offset / @columns);
}
.block-grid-(@x) {
	& > .column {
		width: percentage(1 / @x);
		&:nth-of-type(n) {
			clear: none;
		}
		&:nth-of-type(@{x}n+1) {
			clear: both;
		}
	}
}
.make-guttered(@gutter: @gutter-width-calc) {
	padding-left: (@gutter / 2);
	padding-right: (@gutter / 2);
}
