// GRID SYSTEM
// ----------------------------
@mixin guttered( $gutter: $grid__gutter-width ) {
	padding-left: unitcalc( $gutter / 2 );
	padding-right: unitcalc( $gutter / 2 );
}

// Centered container element
@mixin container( $gutter: $grid__gutter-width, $width: $grid__width ) {
	@include guttered( $gutter );
	max-width: unitcalc( $width );
}

@mixin container--centered {
	margin-left: auto;
	margin-right: auto;
}

@mixin container--left {
	margin-left: 0;
	margin-right: auto;
}

@mixin container--right {
	margin-right: 0;
	margin-left: auto;
}

@mixin row( $gutter: $grid__gutter-width ) {
	display: flex;
	flex-wrap: wrap;
	margin-left: unitcalc( $gutter / -2 );
	margin-right: unitcalc( $gutter / -2 );
}

@mixin form-row( $gutter: $form-grid__gutter-width ) {
	display: flex;
	flex-wrap: wrap;
	margin-left: unitcalc( $gutter / -2 );
	margin-right: unitcalc( $gutter / -2 );
}

@mixin row--centered {
	text-align: center;
	justify-content: center;
}

@mixin column( $gutter: $grid__gutter-width ) {
	position: relative;
	width: 100%;
	@include guttered( $gutter );
}

@mixin form-column( $gutter: $form-grid__gutter-width ) {
	position: relative;
	width: 100%;
	@include guttered( $gutter );
}

@mixin column--auto {
	flex: 0 0 auto;
	width: auto;
	max-width: 100%;
}

@mixin columns( $n, $columns: $grid__columns ) {
	max-width: percentage( $n / $columns );
	flex: 0 0 percentage( $n / $columns );
}

@mixin push( $offset: 1, $columns: $grid__columns ) {
	margin-left: percentage( $offset / $columns );
}

@mixin pull( $offset: 1, $columns: $grid__columns ) {
	margin-right: percentage( $offset / $columns );
}

@mixin column--centered {
	margin-left: auto;
	margin-right: auto;
}

@mixin uncolumn {
	width: auto;
	padding-left: initial;
	padding-right: initial;
}

@mixin unpush {
	margin-left: 0;
}

@mixin unpull {
	margin-right: 0;
}

// make element in column break wider
// align can be 'left', 'center', or 'right'
@mixin break-columns( $n, $parent-n, $gutter: $grid__gutter-width, $align: 'center' ) {
	$width: ( $grid__column-total-width * $n ) - $gutter;
	$parent-width: ( $grid__column-total-width * $parent-n ) - $gutter;
	$difference: $width - $parent-width;
	width: percentage( $width  / $parent-width );

	@if ( $align == 'right' ) {
		margin-left: percentage( $difference / $parent-width * -1 );

	} @else if ( $align == 'center' ) {
		margin-left: percentage( ( $difference / -2 ) / $parent-width );
	}
}

@mixin generate-column-classes( $columns: $grid__columns, $selector-type: '%', $selector-name: 'columns', $i: 1, $prefix: '' ) {
	@while $i <= $columns {

		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include columns( $i, $columns );
		}
		$i: $i + 1;
	}
}

@mixin generate-push-classes( $columns: $grid__columns, $selector-type: '%', $selector-name: 'push', $i: 1, $prefix: '' ) {
	@while $i <= $columns {
		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include push( $i, $columns );
		}
		$i: $i + 1;
	}
}

@mixin generate-pull-classes( $columns: $grid__columns, $selector-type: '%', $selector-name: 'pull', $i: 1, $prefix: '' ) {
	@while $i <= $columns {
		#{$selector-type}#{$prefix}#{$selector-name}-#{$i} {
			@include pull( $i, $columns );
		}
		$i: $i + 1;
	}
}

// BLOCK GRID
@mixin generate-block-grid-classes( $n, $parent-selector: '.block-grid', $parent-modifier-selector: '.block-grid', $child_selector: '.column', $i: 1 ) {
	#{$parent-selector} {
		@include row;
	}

	#{$parent-selector} #{$child-selector} {
		@include column;
	}

	@while $i <= $n {
		#{$parent-modifier-selector}-#{$i} {
			& > #{$child-selector} {
				max-width: percentage( 1 / $i );
				flex: 0 0 percentage( 1 / $i );

			}
		}
		$i: $i + 1;
	}
}

// GRID BREAKPOINT CLASSES
// $selector-type expects '.' (outputs classes) or '%' (outputs placeholders)
@mixin grid-classes( $selector-type: '.', $prefix: null ) {
	#{$selector-type}#{$prefix}guttered { @include guttered; }
	#{$selector-type}#{$prefix}container { @include container; }
	#{$selector-type}#{$prefix}container--centered { @include container--centered; }
	#{$selector-type}#{$prefix}container--left { @include container--left; }
	#{$selector-type}#{$prefix}container--right { @include container--right; }
	#{$selector-type}#{$prefix}row { @include row; }
	#{$selector-type}#{$prefix}form-row { @include form-row; }
	#{$selector-type}#{$prefix}row--centered { @include row--centered; }
	#{$selector-type}#{$prefix}column { @include column; }
	#{$selector-type}#{$prefix}form-column { @include form-column; }
	#{$selector-type}#{$prefix}column--auto { @include column--auto; }
	@include generate-column-classes( $grid__columns, $selector-type, 'columns', 1, $prefix );
	@include generate-push-classes( $grid__columns, $selector-type, 'push', 1, $prefix );
	@include generate-pull-classes( $grid__columns, $selector-type, 'pull', 1, $prefix );
	#{$selector-type}#{$prefix}column--centered { @include column--centered; }
	#{$selector-type}#{$prefix}uncolumn { @include uncolumn; }
	#{$selector-type}#{$prefix}unpush { @include unpush; }
	#{$selector-type}#{$prefix}unpull { @include unpull; }
}

@mixin bp-grid-classes( $selector-type: '.' ) {
	@each $name, $value in $breakpoints {
		@if $value == 0 {
			@include grid-classes( $selector-type );

		} @else {
			$prefix: #{$name}__;
			@include breakpoint-up( $value ) {
				@include grid-classes( $selector-type, $prefix );
			}
		}
	}
}





